{"version":3,"file":"react-hook-form.js","names":["result","formState","field","name","value","isRadioOrCheckbox","props"],"sources":["../../react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\r\n\r\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\r\n\r\nvar isDateObject = (value) => value instanceof Date;\r\n\r\nvar isNullOrUndefined = (value) => value == null;\r\n\r\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) &&\r\n    !Array.isArray(value) &&\r\n    isObjectType(value) &&\r\n    !isDateObject(value);\r\n\r\nvar getEventValue = (event) => isObject(event) && event.target\r\n    ? isCheckBoxInput(event.target)\r\n        ? event.target.checked\r\n        : event.target.value\r\n    : event;\r\n\r\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\r\n\r\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\r\n\r\nvar isPlainObject = (tempObject) => {\r\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\r\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\r\n};\r\n\r\nvar isWeb = typeof window !== 'undefined' &&\r\n    typeof window.HTMLElement !== 'undefined' &&\r\n    typeof document !== 'undefined';\r\n\r\nfunction cloneObject(data) {\r\n    let copy;\r\n    const isArray = Array.isArray(data);\r\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\r\n    if (data instanceof Date) {\r\n        copy = new Date(data);\r\n    }\r\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\r\n        (isArray || isObject(data))) {\r\n        copy = isArray ? [] : Object.create(Object.getPrototypeOf(data));\r\n        if (!isArray && !isPlainObject(data)) {\r\n            copy = data;\r\n        }\r\n        else {\r\n            for (const key in data) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    copy[key] = cloneObject(data[key]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        return data;\r\n    }\r\n    return copy;\r\n}\r\n\r\nvar isKey = (value) => /^\\w*$/.test(value);\r\n\r\nvar isUndefined = (val) => val === undefined;\r\n\r\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\r\n\r\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\r\n\r\nvar get = (object, path, defaultValue) => {\r\n    if (!path || !isObject(object)) {\r\n        return defaultValue;\r\n    }\r\n    const result = (isKey(path) ? [path] : stringToPath(path)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\r\n    return isUndefined(result) || result === object\r\n        ? isUndefined(object[path])\r\n            ? defaultValue\r\n            : object[path]\r\n        : result;\r\n};\r\n\r\nvar isBoolean = (value) => typeof value === 'boolean';\r\n\r\nvar set = (object, path, value) => {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || Array.isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(+tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\r\n            return;\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n};\r\n\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    FOCUS_OUT: 'focusout',\r\n    CHANGE: 'change',\r\n};\r\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n    onTouched: 'onTouched',\r\n    all: 'all',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\n\r\nconst HookFormContext = React.createContext(null);\r\nHookFormContext.displayName = 'HookFormContext';\r\n/**\r\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @returns return all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst useFormContext = () => React.useContext(HookFormContext);\r\n/**\r\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\r\n *\r\n * @param props - all useForm methods\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const methods = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   return (\r\n *     <FormProvider {...methods} >\r\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\r\n *         <NestedInput />\r\n *         <input type=\"submit\" />\r\n *       </form>\r\n *     </FormProvider>\r\n *   );\r\n * }\r\n *\r\n *  function NestedInput() {\r\n *   const { register } = useFormContext(); // retrieve all hook methods\r\n *   return <input {...register(\"test\")} />;\r\n * }\r\n * ```\r\n */\r\nconst FormProvider = (props) => {\r\n    const { children, ...data } = props;\r\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\r\n};\r\n\r\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\r\n    const result = {\r\n        defaultValues: control._defaultValues,\r\n    };\r\n    for (const key in formState) {\r\n        Object.defineProperty(result, key, {\r\n            get: () => {\r\n                const _key = key;\r\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\r\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\r\n                }\r\n                localProxyFormState && (localProxyFormState[_key] = true);\r\n                return formState[_key];\r\n            },\r\n        });\r\n    }\r\n    return result;\r\n};\r\n\r\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\r\n\r\n/**\r\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\r\n *\r\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, control } = useForm({\r\n *     defaultValues: {\r\n *     firstName: \"firstName\"\r\n *   }});\r\n *   const { dirtyFields } = useFormState({\r\n *     control\r\n *   });\r\n *   const onSubmit = (data) => console.log(data);\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\r\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFormState(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, disabled, name, exact } = props || {};\r\n    const [formState, updateFormState] = React.useState(control._formState);\r\n    const _localProxyFormState = React.useRef({\r\n        isDirty: false,\r\n        isLoading: false,\r\n        dirtyFields: false,\r\n        touchedFields: false,\r\n        validatingFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    });\r\n    useIsomorphicLayoutEffect(() => control._subscribe({\r\n        name,\r\n        formState: _localProxyFormState.current,\r\n        exact,\r\n        callback: (formState) => {\r\n            !disabled &&\r\n                updateFormState({\r\n                    ...control._formState,\r\n                    ...formState,\r\n                });\r\n        },\r\n    }), [name, disabled, exact]);\r\n    React.useEffect(() => {\r\n        _localProxyFormState.current.isValid && control._setValid(true);\r\n    }, [control]);\r\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\r\n}\r\n\r\nvar isString = (value) => typeof value === 'string';\r\n\r\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\r\n    if (isString(names)) {\r\n        isGlobal && _names.watch.add(names);\r\n        return get(formValues, names, defaultValue);\r\n    }\r\n    if (Array.isArray(names)) {\r\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName),\r\n            get(formValues, fieldName)));\r\n    }\r\n    isGlobal && (_names.watchAll = true);\r\n    return formValues;\r\n};\r\n\r\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\r\n\r\nfunction deepEqual(object1, object2, _internal_visited = new WeakSet()) {\r\n    if (isPrimitive(object1) || isPrimitive(object2)) {\r\n        return object1 === object2;\r\n    }\r\n    if (isDateObject(object1) && isDateObject(object2)) {\r\n        return object1.getTime() === object2.getTime();\r\n    }\r\n    const keys1 = Object.keys(object1);\r\n    const keys2 = Object.keys(object2);\r\n    if (keys1.length !== keys2.length) {\r\n        return false;\r\n    }\r\n    if (_internal_visited.has(object1) || _internal_visited.has(object2)) {\r\n        return true;\r\n    }\r\n    _internal_visited.add(object1);\r\n    _internal_visited.add(object2);\r\n    for (const key of keys1) {\r\n        const val1 = object1[key];\r\n        if (!keys2.includes(key)) {\r\n            return false;\r\n        }\r\n        if (key !== 'ref') {\r\n            const val2 = object2[key];\r\n            if ((isDateObject(val1) && isDateObject(val2)) ||\r\n                (isObject(val1) && isObject(val2)) ||\r\n                (Array.isArray(val1) && Array.isArray(val2))\r\n                ? !deepEqual(val1, val2, _internal_visited)\r\n                : val1 !== val2) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\r\n *\r\n * @remarks\r\n *\r\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\r\n *\r\n * @example\r\n * ```tsx\r\n * const { control } = useForm();\r\n * const values = useWatch({\r\n *   name: \"fieldName\"\r\n *   control,\r\n * })\r\n * ```\r\n */\r\nfunction useWatch(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, defaultValue, disabled, exact, compute, } = props || {};\r\n    const _defaultValue = React.useRef(defaultValue);\r\n    const _compute = React.useRef(compute);\r\n    const _computeFormValues = React.useRef(undefined);\r\n    _compute.current = compute;\r\n    const defaultValueMemo = React.useMemo(() => control._getWatch(name, _defaultValue.current), [control, name]);\r\n    const [value, updateValue] = React.useState(_compute.current ? _compute.current(defaultValueMemo) : defaultValueMemo);\r\n    useIsomorphicLayoutEffect(() => control._subscribe({\r\n        name,\r\n        formState: {\r\n            values: true,\r\n        },\r\n        exact,\r\n        callback: (formState) => {\r\n            if (!disabled) {\r\n                const formValues = generateWatchOutput(name, control._names, formState.values || control._formValues, false, _defaultValue.current);\r\n                if (_compute.current) {\r\n                    const computedFormValues = _compute.current(formValues);\r\n                    if (!deepEqual(computedFormValues, _computeFormValues.current)) {\r\n                        updateValue(computedFormValues);\r\n                        _computeFormValues.current = computedFormValues;\r\n                    }\r\n                }\r\n                else {\r\n                    updateValue(formValues);\r\n                }\r\n            }\r\n        },\r\n    }), [control, disabled, name, exact]);\r\n    React.useEffect(() => control._removeUnmounted());\r\n    return value;\r\n}\r\n\r\n/**\r\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns field properties, field and form state. {@link UseControllerReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function Input(props) {\r\n *   const { field, fieldState, formState } = useController(props);\r\n *   return (\r\n *     <div>\r\n *       <input {...field} placeholder={props.name} />\r\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\r\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useController(props) {\r\n    const methods = useFormContext();\r\n    const { name, disabled, control = methods.control, shouldUnregister, defaultValue, } = props;\r\n    const isArrayField = isNameInFieldArray(control._names.array, name);\r\n    const defaultValueMemo = React.useMemo(() => get(control._formValues, name, get(control._defaultValues, name, defaultValue)), [control, name, defaultValue]);\r\n    const value = useWatch({\r\n        control,\r\n        name,\r\n        defaultValue: defaultValueMemo,\r\n        exact: true,\r\n    });\r\n    const formState = useFormState({\r\n        control,\r\n        name,\r\n        exact: true,\r\n    });\r\n    const _props = React.useRef(props);\r\n    const _previousNameRef = React.useRef(undefined);\r\n    const _registerProps = React.useRef(control.register(name, {\r\n        ...props.rules,\r\n        value,\r\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\r\n    }));\r\n    _props.current = props;\r\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\r\n        invalid: {\r\n            enumerable: true,\r\n            get: () => !!get(formState.errors, name),\r\n        },\r\n        isDirty: {\r\n            enumerable: true,\r\n            get: () => !!get(formState.dirtyFields, name),\r\n        },\r\n        isTouched: {\r\n            enumerable: true,\r\n            get: () => !!get(formState.touchedFields, name),\r\n        },\r\n        isValidating: {\r\n            enumerable: true,\r\n            get: () => !!get(formState.validatingFields, name),\r\n        },\r\n        error: {\r\n            enumerable: true,\r\n            get: () => get(formState.errors, name),\r\n        },\r\n    }), [formState, name]);\r\n    const onChange = React.useCallback((event) => _registerProps.current.onChange({\r\n        target: {\r\n            value: getEventValue(event),\r\n            name: name,\r\n        },\r\n        type: EVENTS.CHANGE,\r\n    }), [name]);\r\n    const onBlur = React.useCallback(() => _registerProps.current.onBlur({\r\n        target: {\r\n            value: get(control._formValues, name),\r\n            name: name,\r\n        },\r\n        type: EVENTS.BLUR,\r\n    }), [name, control._formValues]);\r\n    const ref = React.useCallback((elm) => {\r\n        const field = get(control._fields, name);\r\n        if (field && elm) {\r\n            field._f.ref = {\r\n                focus: () => elm.focus && elm.focus(),\r\n                select: () => elm.select && elm.select(),\r\n                setCustomValidity: (message) => elm.setCustomValidity(message),\r\n                reportValidity: () => elm.reportValidity(),\r\n            };\r\n        }\r\n    }, [control._fields, name]);\r\n    const field = React.useMemo(() => ({\r\n        name,\r\n        value,\r\n        ...(isBoolean(disabled) || formState.disabled\r\n            ? { disabled: formState.disabled || disabled }\r\n            : {}),\r\n        onChange,\r\n        onBlur,\r\n        ref,\r\n    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);\r\n    React.useEffect(() => {\r\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\r\n        const previousName = _previousNameRef.current;\r\n        if (previousName && previousName !== name && !isArrayField) {\r\n            control.unregister(previousName);\r\n        }\r\n        control.register(name, {\r\n            ..._props.current.rules,\r\n            ...(isBoolean(_props.current.disabled)\r\n                ? { disabled: _props.current.disabled }\r\n                : {}),\r\n        });\r\n        const updateMounted = (name, value) => {\r\n            const field = get(control._fields, name);\r\n            if (field && field._f) {\r\n                field._f.mount = value;\r\n            }\r\n        };\r\n        updateMounted(name, true);\r\n        if (_shouldUnregisterField) {\r\n            const value = cloneObject(get(control._options.defaultValues, name, _props.current.defaultValue));\r\n            set(control._defaultValues, name, value);\r\n            if (isUndefined(get(control._formValues, name))) {\r\n                set(control._formValues, name, value);\r\n            }\r\n        }\r\n        !isArrayField && control.register(name);\r\n        _previousNameRef.current = name;\r\n        return () => {\r\n            (isArrayField\r\n                ? _shouldUnregisterField && !control._state.action\r\n                : _shouldUnregisterField)\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, isArrayField, shouldUnregister]);\r\n    React.useEffect(() => {\r\n        control._setDisabledField({\r\n            disabled,\r\n            name,\r\n        });\r\n    }, [disabled, name, control]);\r\n    return React.useMemo(() => ({\r\n        field,\r\n        formState,\r\n        fieldState,\r\n    }), [field, formState, fieldState]);\r\n}\r\n\r\n/**\r\n * Component based on `useController` hook to work with controlled component.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\r\n *\r\n * @param props - the path name to the form field value, and validation rules.\r\n *\r\n * @returns provide field handler functions, field and form state.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control } = useForm<FormValues>({\r\n *     defaultValues: {\r\n *       test: \"\"\r\n *     }\r\n *   });\r\n *\r\n *   return (\r\n *     <form>\r\n *       <Controller\r\n *         control={control}\r\n *         name=\"test\"\r\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\r\n *           <>\r\n *             <input\r\n *               onChange={onChange} // send value to hook form\r\n *               onBlur={onBlur} // notify when input is touched\r\n *               value={value} // return updated value\r\n *               ref={ref} // set ref for focus management\r\n *             />\r\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\r\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\r\n *           </>\r\n *         )}\r\n *       />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nconst Controller = (props) => props.render(useController(props));\r\n\r\nconst flatten = (obj) => {\r\n    const output = {};\r\n    for (const key of Object.keys(obj)) {\r\n        if (isObjectType(obj[key]) && obj[key] !== null) {\r\n            const nested = flatten(obj[key]);\r\n            for (const nestedKey of Object.keys(nested)) {\r\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\r\n            }\r\n        }\r\n        else {\r\n            output[key] = obj[key];\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\nconst POST_REQUEST = 'post';\r\n/**\r\n * Form component to manage submission.\r\n *\r\n * @param props - to setup submission detail. {@link FormProps}\r\n *\r\n * @returns form component or headless render prop.\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { control, formState: { errors } } = useForm();\r\n *\r\n *   return (\r\n *     <Form action=\"/api\" control={control}>\r\n *       <input {...register(\"name\")} />\r\n *       <p>{errors?.root?.server && 'Server error'}</p>\r\n *       <button>Submit</button>\r\n *     </Form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction Form(props) {\r\n    const methods = useFormContext();\r\n    const [mounted, setMounted] = React.useState(false);\r\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\r\n    const submit = async (event) => {\r\n        let hasError = false;\r\n        let type = '';\r\n        await control.handleSubmit(async (data) => {\r\n            const formData = new FormData();\r\n            let formDataJson = '';\r\n            try {\r\n                formDataJson = JSON.stringify(data);\r\n            }\r\n            catch (_a) { }\r\n            const flattenFormValues = flatten(control._formValues);\r\n            for (const key in flattenFormValues) {\r\n                formData.append(key, flattenFormValues[key]);\r\n            }\r\n            if (onSubmit) {\r\n                await onSubmit({\r\n                    data,\r\n                    event,\r\n                    method,\r\n                    formData,\r\n                    formDataJson,\r\n                });\r\n            }\r\n            if (action) {\r\n                try {\r\n                    const shouldStringifySubmissionData = [\r\n                        headers && headers['Content-Type'],\r\n                        encType,\r\n                    ].some((value) => value && value.includes('json'));\r\n                    const response = await fetch(String(action), {\r\n                        method,\r\n                        headers: {\r\n                            ...headers,\r\n                            ...(encType && encType !== 'multipart/form-data'\r\n                                ? { 'Content-Type': encType }\r\n                                : {}),\r\n                        },\r\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\r\n                    });\r\n                    if (response &&\r\n                        (validateStatus\r\n                            ? !validateStatus(response.status)\r\n                            : response.status < 200 || response.status >= 300)) {\r\n                        hasError = true;\r\n                        onError && onError({ response });\r\n                        type = String(response.status);\r\n                    }\r\n                    else {\r\n                        onSuccess && onSuccess({ response });\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    hasError = true;\r\n                    onError && onError({ error });\r\n                }\r\n            }\r\n        })(event);\r\n        if (hasError && props.control) {\r\n            props.control._subjects.state.next({\r\n                isSubmitSuccessful: false,\r\n            });\r\n            props.control.setError('root.server', {\r\n                type,\r\n            });\r\n        }\r\n    };\r\n    React.useEffect(() => {\r\n        setMounted(true);\r\n    }, []);\r\n    return render ? (React.createElement(React.Fragment, null, render({\r\n        submit,\r\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\r\n}\r\n\r\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\r\n    ? {\r\n        ...errors[name],\r\n        types: {\r\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\r\n            [type]: message || true,\r\n        },\r\n    }\r\n    : {};\r\n\r\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\r\n\r\nvar createSubject = () => {\r\n    let _observers = [];\r\n    const next = (value) => {\r\n        for (const observer of _observers) {\r\n            observer.next && observer.next(value);\r\n        }\r\n    };\r\n    const subscribe = (observer) => {\r\n        _observers.push(observer);\r\n        return {\r\n            unsubscribe: () => {\r\n                _observers = _observers.filter((o) => o !== observer);\r\n            },\r\n        };\r\n    };\r\n    const unsubscribe = () => {\r\n        _observers = [];\r\n    };\r\n    return {\r\n        get observers() {\r\n            return _observers;\r\n        },\r\n        next,\r\n        subscribe,\r\n        unsubscribe,\r\n    };\r\n};\r\n\r\nfunction extractFormValues(fieldsState, formValues) {\r\n    const values = {};\r\n    for (const key in fieldsState) {\r\n        if (fieldsState.hasOwnProperty(key)) {\r\n            const fieldState = fieldsState[key];\r\n            const fieldValue = formValues[key];\r\n            if (fieldState && isObject(fieldState) && fieldValue) {\r\n                const nestedFieldsState = extractFormValues(fieldState, fieldValue);\r\n                if (isObject(nestedFieldsState)) {\r\n                    values[key] = nestedFieldsState;\r\n                }\r\n            }\r\n            else if (fieldsState[key]) {\r\n                values[key] = fieldValue;\r\n            }\r\n        }\r\n    }\r\n    return values;\r\n}\r\n\r\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\r\n\r\nvar isFileInput = (element) => element.type === 'file';\r\n\r\nvar isFunction = (value) => typeof value === 'function';\r\n\r\nvar isHTMLElement = (value) => {\r\n    if (!isWeb) {\r\n        return false;\r\n    }\r\n    const owner = value ? value.ownerDocument : 0;\r\n    return (value instanceof\r\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\r\n};\r\n\r\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\r\n\r\nvar isRadioInput = (element) => element.type === 'radio';\r\n\r\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\r\n\r\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\r\n\r\nfunction baseGet(object, updatePath) {\r\n    const length = updatePath.slice(0, -1).length;\r\n    let index = 0;\r\n    while (index < length) {\r\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\r\n    }\r\n    return object;\r\n}\r\nfunction isEmptyArray(obj) {\r\n    for (const key in obj) {\r\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction unset(object, path) {\r\n    const paths = Array.isArray(path)\r\n        ? path\r\n        : isKey(path)\r\n            ? [path]\r\n            : stringToPath(path);\r\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\r\n    const index = paths.length - 1;\r\n    const key = paths[index];\r\n    if (childObject) {\r\n        delete childObject[key];\r\n    }\r\n    if (index !== 0 &&\r\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\r\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\r\n        unset(object, paths.slice(0, -1));\r\n    }\r\n    return object;\r\n}\r\n\r\nvar objectHasFunction = (data) => {\r\n    for (const key in data) {\r\n        if (isFunction(data[key])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\nfunction isTraversable(value) {\r\n    return Array.isArray(value) || (isObject(value) && !objectHasFunction(value));\r\n}\r\nfunction markFieldsDirty(data, fields = {}) {\r\n    for (const key in data) {\r\n        if (isTraversable(data[key])) {\r\n            fields[key] = Array.isArray(data[key]) ? [] : {};\r\n            markFieldsDirty(data[key], fields[key]);\r\n        }\r\n        else if (!isUndefined(data[key])) {\r\n            fields[key] = true;\r\n        }\r\n    }\r\n    return fields;\r\n}\r\nfunction getDirtyFields(data, formValues, dirtyFieldsFromValues) {\r\n    if (!dirtyFieldsFromValues) {\r\n        dirtyFieldsFromValues = markFieldsDirty(formValues);\r\n    }\r\n    for (const key in data) {\r\n        if (isTraversable(data[key])) {\r\n            if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {\r\n                dirtyFieldsFromValues[key] = markFieldsDirty(data[key], Array.isArray(data[key]) ? [] : {});\r\n            }\r\n            else {\r\n                getDirtyFields(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\r\n            }\r\n        }\r\n        else {\r\n            dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\r\n        }\r\n    }\r\n    return dirtyFieldsFromValues;\r\n}\r\n\r\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (Array.isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter((option) => option && option.checked && !option.disabled)\r\n                .map((option) => option.value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        return options[0].checked && !options[0].disabled\r\n            ? // @ts-expect-error expected to work in the browser\r\n                options[0].attributes && !isUndefined(options[0].attributes.value)\r\n                    ? isUndefined(options[0].value) || options[0].value === ''\r\n                        ? validResult\r\n                        : { value: options[0].value, isValid: true }\r\n                    : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\r\n\r\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\r\n    ? value\r\n    : valueAsNumber\r\n        ? value === ''\r\n            ? NaN\r\n            : value\r\n                ? +value\r\n                : value\r\n        : valueAsDate && isString(value)\r\n            ? new Date(value)\r\n            : setValueAs\r\n                ? setValueAs(value)\r\n                : value;\r\n\r\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: null,\r\n};\r\nvar getRadioValue = (options) => Array.isArray(options)\r\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\r\n        ? {\r\n            isValid: true,\r\n            value: option.value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\r\n\r\nfunction getFieldValue(_f) {\r\n    const ref = _f.ref;\r\n    if (isFileInput(ref)) {\r\n        return ref.files;\r\n    }\r\n    if (isRadioInput(ref)) {\r\n        return getRadioValue(_f.refs).value;\r\n    }\r\n    if (isMultipleSelect(ref)) {\r\n        return [...ref.selectedOptions].map(({ value }) => value);\r\n    }\r\n    if (isCheckBoxInput(ref)) {\r\n        return getCheckboxValue(_f.refs).value;\r\n    }\r\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\r\n}\r\n\r\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\r\n    const fields = {};\r\n    for (const name of fieldsNames) {\r\n        const field = get(_fields, name);\r\n        field && set(fields, name, field._f);\r\n    }\r\n    return {\r\n        criteriaMode,\r\n        names: [...fieldsNames],\r\n        fields,\r\n        shouldUseNativeValidation,\r\n    };\r\n};\r\n\r\nvar isRegex = (value) => value instanceof RegExp;\r\n\r\nvar getRuleValue = (rule) => isUndefined(rule)\r\n    ? rule\r\n    : isRegex(rule)\r\n        ? rule.source\r\n        : isObject(rule)\r\n            ? isRegex(rule.value)\r\n                ? rule.value.source\r\n                : rule.value\r\n            : rule;\r\n\r\nvar getValidationModes = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n    isOnAll: mode === VALIDATION_MODE.all,\r\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\r\n});\r\n\r\nconst ASYNC_FUNCTION = 'AsyncFunction';\r\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\r\n    !!fieldReference.validate &&\r\n    !!((isFunction(fieldReference.validate) &&\r\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\r\n        (isObject(fieldReference.validate) &&\r\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\r\n\r\nvar hasValidation = (options) => options.mount &&\r\n    (options.required ||\r\n        options.min ||\r\n        options.max ||\r\n        options.maxLength ||\r\n        options.minLength ||\r\n        options.pattern ||\r\n        options.validate);\r\n\r\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\r\n    (_names.watchAll ||\r\n        _names.watch.has(name) ||\r\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\r\n            /^\\.\\w+/.test(name.slice(watchName.length))));\r\n\r\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\r\n    for (const key of fieldsNames || Object.keys(fields)) {\r\n        const field = get(fields, key);\r\n        if (field) {\r\n            const { _f, ...currentField } = field;\r\n            if (_f) {\r\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\r\n                    return true;\r\n                }\r\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\r\n                    return true;\r\n                }\r\n                else {\r\n                    if (iterateFieldsByAction(currentField, action)) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else if (isObject(currentField)) {\r\n                if (iterateFieldsByAction(currentField, action)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return;\r\n};\r\n\r\nfunction schemaErrorLookup(errors, _fields, name) {\r\n    const error = get(errors, name);\r\n    if (error || isKey(name)) {\r\n        return {\r\n            error,\r\n            name,\r\n        };\r\n    }\r\n    const names = name.split('.');\r\n    while (names.length) {\r\n        const fieldName = names.join('.');\r\n        const field = get(_fields, fieldName);\r\n        const foundError = get(errors, fieldName);\r\n        if (field && !Array.isArray(field) && name !== fieldName) {\r\n            return { name };\r\n        }\r\n        if (foundError && foundError.type) {\r\n            return {\r\n                name: fieldName,\r\n                error: foundError,\r\n            };\r\n        }\r\n        if (foundError && foundError.root && foundError.root.type) {\r\n            return {\r\n                name: `${fieldName}.root`,\r\n                error: foundError.root,\r\n            };\r\n        }\r\n        names.pop();\r\n    }\r\n    return {\r\n        name,\r\n    };\r\n}\r\n\r\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\r\n    updateFormState(formStateData);\r\n    const { name, ...formState } = formStateData;\r\n    return (isEmptyObject(formState) ||\r\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\r\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\r\n            (!isRoot || VALIDATION_MODE.all)));\r\n};\r\n\r\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\r\n    !signalName ||\r\n    name === signalName ||\r\n    convertToArrayPayload(name).some((currentName) => currentName &&\r\n        (exact\r\n            ? currentName === signalName\r\n            : currentName.startsWith(signalName) ||\r\n                signalName.startsWith(currentName)));\r\n\r\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\r\n    if (mode.isOnAll) {\r\n        return false;\r\n    }\r\n    else if (!isSubmitted && mode.isOnTouch) {\r\n        return !(isTouched || isBlurEvent);\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\r\n        return !isBlurEvent;\r\n    }\r\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\r\n        return isBlurEvent;\r\n    }\r\n    return true;\r\n};\r\n\r\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\r\n\r\nvar updateFieldArrayRootError = (errors, error, name) => {\r\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\r\n    set(fieldArrayErrors, 'root', error[name]);\r\n    set(errors, name, fieldArrayErrors);\r\n    return errors;\r\n};\r\n\r\nfunction getValidateError(result, ref, type = 'validate') {\r\n    if (isString(result) ||\r\n        (Array.isArray(result) && result.every(isString)) ||\r\n        (isBoolean(result) && !result)) {\r\n        return {\r\n            type,\r\n            message: isString(result) ? result : '',\r\n            ref,\r\n        };\r\n    }\r\n}\r\n\r\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\r\n    ? validationData\r\n    : {\r\n        value: validationData,\r\n        message: '',\r\n    };\r\n\r\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\r\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\r\n    const inputValue = get(formValues, name);\r\n    if (!mount || disabledFieldNames.has(name)) {\r\n        return {};\r\n    }\r\n    const inputRef = refs ? refs[0] : ref;\r\n    const setCustomValidity = (message) => {\r\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\r\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\r\n            inputRef.reportValidity();\r\n        }\r\n    };\r\n    const error = {};\r\n    const isRadio = isRadioInput(ref);\r\n    const isCheckBox = isCheckBoxInput(ref);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\r\n        isUndefined(ref.value) &&\r\n        isUndefined(inputValue)) ||\r\n        (isHTMLElement(ref) && ref.value === '') ||\r\n        inputValue === '' ||\r\n        (Array.isArray(inputValue) && !inputValue.length);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = {\r\n            type: exceedMax ? maxType : minType,\r\n            message,\r\n            ref,\r\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\r\n        };\r\n    };\r\n    if (isFieldArray\r\n        ? !Array.isArray(inputValue) || !inputValue.length\r\n        : required &&\r\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\r\n                (isBoolean(inputValue) && !inputValue) ||\r\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\r\n                (isRadio && !getRadioValue(refs).isValid))) {\r\n        const { value, message } = isString(required)\r\n            ? { value: !!required, message: required }\r\n            : getValueAndMessage(required);\r\n        if (value) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.required,\r\n                message,\r\n                ref: inputRef,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const maxOutput = getValueAndMessage(max);\r\n        const minOutput = getValueAndMessage(min);\r\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\r\n            const valueNumber = ref.valueAsNumber ||\r\n                (inputValue ? +inputValue : inputValue);\r\n            if (!isNullOrUndefined(maxOutput.value)) {\r\n                exceedMax = valueNumber > maxOutput.value;\r\n            }\r\n            if (!isNullOrUndefined(minOutput.value)) {\r\n                exceedMin = valueNumber < minOutput.value;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = ref.valueAsDate || new Date(inputValue);\r\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\r\n            const isTime = ref.type == 'time';\r\n            const isWeek = ref.type == 'week';\r\n            if (isString(maxOutput.value) && inputValue) {\r\n                exceedMax = isTime\r\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\r\n                    : isWeek\r\n                        ? inputValue > maxOutput.value\r\n                        : valueDate > new Date(maxOutput.value);\r\n            }\r\n            if (isString(minOutput.value) && inputValue) {\r\n                exceedMin = isTime\r\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\r\n                    : isWeek\r\n                        ? inputValue < minOutput.value\r\n                        : valueDate < new Date(minOutput.value);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if ((maxLength || minLength) &&\r\n        !isEmpty &&\r\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\r\n        const maxLengthOutput = getValueAndMessage(maxLength);\r\n        const minLengthOutput = getValueAndMessage(minLength);\r\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\r\n            inputValue.length > +maxLengthOutput.value;\r\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\r\n            inputValue.length < +minLengthOutput.value;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(error[name].message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty && isString(inputValue)) {\r\n        const { value: patternValue, message } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\r\n            error[name] = {\r\n                type: INPUT_VALIDATION_RULES.pattern,\r\n                message,\r\n                ref,\r\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\r\n            };\r\n            if (!validateAllFieldCriteria) {\r\n                setCustomValidity(message);\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        if (isFunction(validate)) {\r\n            const result = await validate(inputValue, formValues);\r\n            const validateError = getValidateError(result, inputRef);\r\n            if (validateError) {\r\n                error[name] = {\r\n                    ...validateError,\r\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    setCustomValidity(validateError.message);\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            let validationResult = {};\r\n            for (const key in validate) {\r\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\r\n                    break;\r\n                }\r\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\r\n                if (validateError) {\r\n                    validationResult = {\r\n                        ...validateError,\r\n                        ...appendErrorsCurry(key, validateError.message),\r\n                    };\r\n                    setCustomValidity(validateError.message);\r\n                    if (validateAllFieldCriteria) {\r\n                        error[name] = validationResult;\r\n                    }\r\n                }\r\n            }\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = {\r\n                    ref: inputRef,\r\n                    ...validationResult,\r\n                };\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    setCustomValidity(true);\r\n    return error;\r\n};\r\n\r\nconst defaultOptions = {\r\n    mode: VALIDATION_MODE.onSubmit,\r\n    reValidateMode: VALIDATION_MODE.onChange,\r\n    shouldFocusError: true,\r\n};\r\nfunction createFormControl(props = {}) {\r\n    let _options = {\r\n        ...defaultOptions,\r\n        ...props,\r\n    };\r\n    let _formState = {\r\n        submitCount: 0,\r\n        isDirty: false,\r\n        isReady: false,\r\n        isLoading: isFunction(_options.defaultValues),\r\n        isValidating: false,\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        touchedFields: {},\r\n        dirtyFields: {},\r\n        validatingFields: {},\r\n        errors: _options.errors || {},\r\n        disabled: _options.disabled || false,\r\n    };\r\n    let _fields = {};\r\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\r\n        ? cloneObject(_options.defaultValues || _options.values) || {}\r\n        : {};\r\n    let _formValues = _options.shouldUnregister\r\n        ? {}\r\n        : cloneObject(_defaultValues);\r\n    let _state = {\r\n        action: false,\r\n        mount: false,\r\n        watch: false,\r\n    };\r\n    let _names = {\r\n        mount: new Set(),\r\n        disabled: new Set(),\r\n        unMount: new Set(),\r\n        array: new Set(),\r\n        watch: new Set(),\r\n    };\r\n    let delayErrorCallback;\r\n    let timer = 0;\r\n    const _proxyFormState = {\r\n        isDirty: false,\r\n        dirtyFields: false,\r\n        validatingFields: false,\r\n        touchedFields: false,\r\n        isValidating: false,\r\n        isValid: false,\r\n        errors: false,\r\n    };\r\n    let _proxySubscribeFormState = {\r\n        ..._proxyFormState,\r\n    };\r\n    const _subjects = {\r\n        array: createSubject(),\r\n        state: createSubject(),\r\n    };\r\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\r\n    const debounce = (callback) => (wait) => {\r\n        clearTimeout(timer);\r\n        timer = setTimeout(callback, wait);\r\n    };\r\n    const _setValid = async (shouldUpdateValid) => {\r\n        if (!_options.disabled &&\r\n            (_proxyFormState.isValid ||\r\n                _proxySubscribeFormState.isValid ||\r\n                shouldUpdateValid)) {\r\n            const isValid = _options.resolver\r\n                ? isEmptyObject((await _runSchema()).errors)\r\n                : await executeBuiltInValidation(_fields, true);\r\n            if (isValid !== _formState.isValid) {\r\n                _subjects.state.next({\r\n                    isValid,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    const _updateIsValidating = (names, isValidating) => {\r\n        if (!_options.disabled &&\r\n            (_proxyFormState.isValidating ||\r\n                _proxyFormState.validatingFields ||\r\n                _proxySubscribeFormState.isValidating ||\r\n                _proxySubscribeFormState.validatingFields)) {\r\n            (names || Array.from(_names.mount)).forEach((name) => {\r\n                if (name) {\r\n                    isValidating\r\n                        ? set(_formState.validatingFields, name, isValidating)\r\n                        : unset(_formState.validatingFields, name);\r\n                }\r\n            });\r\n            _subjects.state.next({\r\n                validatingFields: _formState.validatingFields,\r\n                isValidating: !isEmptyObject(_formState.validatingFields),\r\n            });\r\n        }\r\n    };\r\n    const _setFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\r\n        if (args && method && !_options.disabled) {\r\n            _state.action = true;\r\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\r\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_fields, name, fieldValues);\r\n            }\r\n            if (shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.errors, name))) {\r\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.errors, name, errors);\r\n                unsetEmptyArray(_formState.errors, name);\r\n            }\r\n            if ((_proxyFormState.touchedFields ||\r\n                _proxySubscribeFormState.touchedFields) &&\r\n                shouldUpdateFieldsAndState &&\r\n                Array.isArray(get(_formState.touchedFields, name))) {\r\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\r\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\r\n            }\r\n            if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {\r\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\r\n            }\r\n            _subjects.state.next({\r\n                name,\r\n                isDirty: _getDirty(name, values),\r\n                dirtyFields: _formState.dirtyFields,\r\n                errors: _formState.errors,\r\n                isValid: _formState.isValid,\r\n            });\r\n        }\r\n        else {\r\n            set(_formValues, name, values);\r\n        }\r\n    };\r\n    const updateErrors = (name, error) => {\r\n        set(_formState.errors, name, error);\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n        });\r\n    };\r\n    const _setErrors = (errors) => {\r\n        _formState.errors = errors;\r\n        _subjects.state.next({\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n    };\r\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\r\n        const field = get(_fields, name);\r\n        if (field) {\r\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\r\n            isUndefined(defaultValue) ||\r\n                (ref && ref.defaultChecked) ||\r\n                shouldSkipSetValueAs\r\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\r\n                : setFieldValue(name, defaultValue);\r\n            _state.mount && _setValid();\r\n        }\r\n    };\r\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\r\n        let shouldUpdateField = false;\r\n        let isPreviousDirty = false;\r\n        const output = {\r\n            name,\r\n        };\r\n        if (!_options.disabled) {\r\n            if (!isBlurEvent || shouldDirty) {\r\n                if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {\r\n                    isPreviousDirty = _formState.isDirty;\r\n                    _formState.isDirty = output.isDirty = _getDirty();\r\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\r\n                }\r\n                const isCurrentFieldPristine = deepEqual(get(_defaultValues, name), fieldValue);\r\n                isPreviousDirty = !!get(_formState.dirtyFields, name);\r\n                isCurrentFieldPristine\r\n                    ? unset(_formState.dirtyFields, name)\r\n                    : set(_formState.dirtyFields, name, true);\r\n                output.dirtyFields = _formState.dirtyFields;\r\n                shouldUpdateField =\r\n                    shouldUpdateField ||\r\n                        ((_proxyFormState.dirtyFields ||\r\n                            _proxySubscribeFormState.dirtyFields) &&\r\n                            isPreviousDirty !== !isCurrentFieldPristine);\r\n            }\r\n            if (isBlurEvent) {\r\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\r\n                if (!isPreviousFieldTouched) {\r\n                    set(_formState.touchedFields, name, isBlurEvent);\r\n                    output.touchedFields = _formState.touchedFields;\r\n                    shouldUpdateField =\r\n                        shouldUpdateField ||\r\n                            ((_proxyFormState.touchedFields ||\r\n                                _proxySubscribeFormState.touchedFields) &&\r\n                                isPreviousFieldTouched !== isBlurEvent);\r\n                }\r\n            }\r\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\r\n        }\r\n        return shouldUpdateField ? output : {};\r\n    };\r\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\r\n        const previousFieldError = get(_formState.errors, name);\r\n        const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\r\n            isBoolean(isValid) &&\r\n            _formState.isValid !== isValid;\r\n        if (_options.delayError && error) {\r\n            delayErrorCallback = debounce(() => updateErrors(name, error));\r\n            delayErrorCallback(_options.delayError);\r\n        }\r\n        else {\r\n            clearTimeout(timer);\r\n            delayErrorCallback = null;\r\n            error\r\n                ? set(_formState.errors, name, error)\r\n                : unset(_formState.errors, name);\r\n        }\r\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\r\n            !isEmptyObject(fieldState) ||\r\n            shouldUpdateValid) {\r\n            const updatedFormState = {\r\n                ...fieldState,\r\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\r\n                errors: _formState.errors,\r\n                name,\r\n            };\r\n            _formState = {\r\n                ..._formState,\r\n                ...updatedFormState,\r\n            };\r\n            _subjects.state.next(updatedFormState);\r\n        }\r\n    };\r\n    const _runSchema = async (name) => {\r\n        _updateIsValidating(name, true);\r\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\r\n        _updateIsValidating(name);\r\n        return result;\r\n    };\r\n    const executeSchemaAndUpdateState = async (names) => {\r\n        const { errors } = await _runSchema(names);\r\n        if (names) {\r\n            for (const name of names) {\r\n                const error = get(errors, name);\r\n                error\r\n                    ? set(_formState.errors, name, error)\r\n                    : unset(_formState.errors, name);\r\n            }\r\n        }\r\n        else {\r\n            _formState.errors = errors;\r\n        }\r\n        return errors;\r\n    };\r\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\r\n        valid: true,\r\n    }) => {\r\n        for (const name in fields) {\r\n            const field = fields[name];\r\n            if (field) {\r\n                const { _f, ...fieldValue } = field;\r\n                if (_f) {\r\n                    const isFieldArrayRoot = _names.array.has(_f.name);\r\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\r\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\r\n                        _updateIsValidating([_f.name], true);\r\n                    }\r\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\r\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\r\n                        _updateIsValidating([_f.name]);\r\n                    }\r\n                    if (fieldError[_f.name]) {\r\n                        context.valid = false;\r\n                        if (shouldOnlyCheckValid) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    !shouldOnlyCheckValid &&\r\n                        (get(fieldError, _f.name)\r\n                            ? isFieldArrayRoot\r\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\r\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\r\n                            : unset(_formState.errors, _f.name));\r\n                }\r\n                !isEmptyObject(fieldValue) &&\r\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\r\n            }\r\n        }\r\n        return context.valid;\r\n    };\r\n    const _removeUnmounted = () => {\r\n        for (const name of _names.unMount) {\r\n            const field = get(_fields, name);\r\n            field &&\r\n                (field._f.refs\r\n                    ? field._f.refs.every((ref) => !live(ref))\r\n                    : !live(field._f.ref)) &&\r\n                unregister(name);\r\n        }\r\n        _names.unMount = new Set();\r\n    };\r\n    const _getDirty = (name, data) => !_options.disabled &&\r\n        (name && data && set(_formValues, name, data),\r\n            !deepEqual(getValues(), _defaultValues));\r\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\r\n        ...(_state.mount\r\n            ? _formValues\r\n            : isUndefined(defaultValue)\r\n                ? _defaultValues\r\n                : isString(names)\r\n                    ? { [names]: defaultValue }\r\n                    : defaultValue),\r\n    }, isGlobal, defaultValue);\r\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\r\n    const setFieldValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        let fieldValue = value;\r\n        if (field) {\r\n            const fieldReference = field._f;\r\n            if (fieldReference) {\r\n                !fieldReference.disabled &&\r\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\r\n                fieldValue =\r\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\r\n                        ? ''\r\n                        : value;\r\n                if (isMultipleSelect(fieldReference.ref)) {\r\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\r\n                }\r\n                else if (fieldReference.refs) {\r\n                    if (isCheckBoxInput(fieldReference.ref)) {\r\n                        fieldReference.refs.forEach((checkboxRef) => {\r\n                            if (!checkboxRef.defaultChecked || !checkboxRef.disabled) {\r\n                                if (Array.isArray(fieldValue)) {\r\n                                    checkboxRef.checked = !!fieldValue.find((data) => data === checkboxRef.value);\r\n                                }\r\n                                else {\r\n                                    checkboxRef.checked =\r\n                                        fieldValue === checkboxRef.value || !!fieldValue;\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\r\n                    }\r\n                }\r\n                else if (isFileInput(fieldReference.ref)) {\r\n                    fieldReference.ref.value = '';\r\n                }\r\n                else {\r\n                    fieldReference.ref.value = fieldValue;\r\n                    if (!fieldReference.ref.type) {\r\n                        _subjects.state.next({\r\n                            name,\r\n                            values: cloneObject(_formValues),\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        (options.shouldDirty || options.shouldTouch) &&\r\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\r\n        options.shouldValidate && trigger(name);\r\n    };\r\n    const setValues = (name, value, options) => {\r\n        for (const fieldKey in value) {\r\n            if (!value.hasOwnProperty(fieldKey)) {\r\n                return;\r\n            }\r\n            const fieldValue = value[fieldKey];\r\n            const fieldName = name + '.' + fieldKey;\r\n            const field = get(_fields, fieldName);\r\n            (_names.array.has(name) ||\r\n                isObject(fieldValue) ||\r\n                (field && !field._f)) &&\r\n                !isDateObject(fieldValue)\r\n                ? setValues(fieldName, fieldValue, options)\r\n                : setFieldValue(fieldName, fieldValue, options);\r\n        }\r\n    };\r\n    const setValue = (name, value, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const isFieldArray = _names.array.has(name);\r\n        const cloneValue = cloneObject(value);\r\n        set(_formValues, name, cloneValue);\r\n        if (isFieldArray) {\r\n            _subjects.array.next({\r\n                name,\r\n                values: cloneObject(_formValues),\r\n            });\r\n            if ((_proxyFormState.isDirty ||\r\n                _proxyFormState.dirtyFields ||\r\n                _proxySubscribeFormState.isDirty ||\r\n                _proxySubscribeFormState.dirtyFields) &&\r\n                options.shouldDirty) {\r\n                _subjects.state.next({\r\n                    name,\r\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\r\n                    isDirty: _getDirty(name, cloneValue),\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            field && !field._f && !isNullOrUndefined(cloneValue)\r\n                ? setValues(name, cloneValue, options)\r\n                : setFieldValue(name, cloneValue, options);\r\n        }\r\n        isWatched(name, _names) && _subjects.state.next({ ..._formState, name });\r\n        _subjects.state.next({\r\n            name: _state.mount ? name : undefined,\r\n            values: cloneObject(_formValues),\r\n        });\r\n    };\r\n    const onChange = async (event) => {\r\n        _state.mount = true;\r\n        const target = event.target;\r\n        let name = target.name;\r\n        let isFieldValueUpdated = true;\r\n        const field = get(_fields, name);\r\n        const _updateIsFieldValueUpdated = (fieldValue) => {\r\n            isFieldValueUpdated =\r\n                Number.isNaN(fieldValue) ||\r\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\r\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\r\n        };\r\n        const validationModeBeforeSubmit = getValidationModes(_options.mode);\r\n        const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\r\n        if (field) {\r\n            let error;\r\n            let isValid;\r\n            const fieldValue = target.type\r\n                ? getFieldValue(field._f)\r\n                : getEventValue(event);\r\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\r\n            const shouldSkipValidation = (!hasValidation(field._f) &&\r\n                !_options.resolver &&\r\n                !get(_formState.errors, name) &&\r\n                !field._f.deps) ||\r\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\r\n            const watched = isWatched(name, _names, isBlurEvent);\r\n            set(_formValues, name, fieldValue);\r\n            if (isBlurEvent) {\r\n                if (!target || !target.readOnly) {\r\n                    field._f.onBlur && field._f.onBlur(event);\r\n                    delayErrorCallback && delayErrorCallback(0);\r\n                }\r\n            }\r\n            else if (field._f.onChange) {\r\n                field._f.onChange(event);\r\n            }\r\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);\r\n            const shouldRender = !isEmptyObject(fieldState) || watched;\r\n            !isBlurEvent &&\r\n                _subjects.state.next({\r\n                    name,\r\n                    type: event.type,\r\n                    values: cloneObject(_formValues),\r\n                });\r\n            if (shouldSkipValidation) {\r\n                if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {\r\n                    if (_options.mode === 'onBlur') {\r\n                        if (isBlurEvent) {\r\n                            _setValid();\r\n                        }\r\n                    }\r\n                    else if (!isBlurEvent) {\r\n                        _setValid();\r\n                    }\r\n                }\r\n                return (shouldRender &&\r\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\r\n            }\r\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\r\n            if (_options.resolver) {\r\n                const { errors } = await _runSchema([name]);\r\n                _updateIsFieldValueUpdated(fieldValue);\r\n                if (isFieldValueUpdated) {\r\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\r\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\r\n                    error = errorLookupResult.error;\r\n                    name = errorLookupResult.name;\r\n                    isValid = isEmptyObject(errors);\r\n                }\r\n            }\r\n            else {\r\n                _updateIsValidating([name], true);\r\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\r\n                _updateIsValidating([name]);\r\n                _updateIsFieldValueUpdated(fieldValue);\r\n                if (isFieldValueUpdated) {\r\n                    if (error) {\r\n                        isValid = false;\r\n                    }\r\n                    else if (_proxyFormState.isValid ||\r\n                        _proxySubscribeFormState.isValid) {\r\n                        isValid = await executeBuiltInValidation(_fields, true);\r\n                    }\r\n                }\r\n            }\r\n            if (isFieldValueUpdated) {\r\n                field._f.deps &&\r\n                    (!Array.isArray(field._f.deps) || field._f.deps.length > 0) &&\r\n                    trigger(field._f.deps);\r\n                shouldRenderByError(name, isValid, error, fieldState);\r\n            }\r\n        }\r\n    };\r\n    const _focusInput = (ref, key) => {\r\n        if (get(_formState.errors, key) && ref.focus) {\r\n            ref.focus();\r\n            return 1;\r\n        }\r\n        return;\r\n    };\r\n    const trigger = async (name, options = {}) => {\r\n        let isValid;\r\n        let validationResult;\r\n        const fieldNames = convertToArrayPayload(name);\r\n        if (_options.resolver) {\r\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\r\n            isValid = isEmptyObject(errors);\r\n            validationResult = name\r\n                ? !fieldNames.some((name) => get(errors, name))\r\n                : isValid;\r\n        }\r\n        else if (name) {\r\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\r\n                const field = get(_fields, fieldName);\r\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\r\n            }))).every(Boolean);\r\n            !(!validationResult && !_formState.isValid) && _setValid();\r\n        }\r\n        else {\r\n            validationResult = isValid = await executeBuiltInValidation(_fields);\r\n        }\r\n        _subjects.state.next({\r\n            ...(!isString(name) ||\r\n                ((_proxyFormState.isValid || _proxySubscribeFormState.isValid) &&\r\n                    isValid !== _formState.isValid)\r\n                ? {}\r\n                : { name }),\r\n            ...(_options.resolver || !name ? { isValid } : {}),\r\n            errors: _formState.errors,\r\n        });\r\n        options.shouldFocus &&\r\n            !validationResult &&\r\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\r\n        return validationResult;\r\n    };\r\n    const getValues = (fieldNames, config) => {\r\n        let values = {\r\n            ...(_state.mount ? _formValues : _defaultValues),\r\n        };\r\n        if (config) {\r\n            values = extractFormValues(config.dirtyFields ? _formState.dirtyFields : _formState.touchedFields, values);\r\n        }\r\n        return isUndefined(fieldNames)\r\n            ? values\r\n            : isString(fieldNames)\r\n                ? get(values, fieldNames)\r\n                : fieldNames.map((name) => get(values, name));\r\n    };\r\n    const getFieldState = (name, formState) => ({\r\n        invalid: !!get((formState || _formState).errors, name),\r\n        isDirty: !!get((formState || _formState).dirtyFields, name),\r\n        error: get((formState || _formState).errors, name),\r\n        isValidating: !!get(_formState.validatingFields, name),\r\n        isTouched: !!get((formState || _formState).touchedFields, name),\r\n    });\r\n    const clearErrors = (name) => {\r\n        name &&\r\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\r\n        _subjects.state.next({\r\n            errors: name ? _formState.errors : {},\r\n        });\r\n    };\r\n    const setError = (name, error, options) => {\r\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\r\n        const currentError = get(_formState.errors, name) || {};\r\n        // Don't override existing error messages elsewhere in the object tree.\r\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\r\n        set(_formState.errors, name, {\r\n            ...restOfErrorTree,\r\n            ...error,\r\n            ref,\r\n        });\r\n        _subjects.state.next({\r\n            name,\r\n            errors: _formState.errors,\r\n            isValid: false,\r\n        });\r\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\r\n    };\r\n    const watch = (name, defaultValue) => isFunction(name)\r\n        ? _subjects.state.subscribe({\r\n            next: (payload) => 'values' in payload &&\r\n                name(_getWatch(undefined, defaultValue), payload),\r\n        })\r\n        : _getWatch(name, defaultValue, true);\r\n    const _subscribe = (props) => _subjects.state.subscribe({\r\n        next: (formState) => {\r\n            if (shouldSubscribeByName(props.name, formState.name, props.exact) &&\r\n                shouldRenderFormState(formState, props.formState || _proxyFormState, _setFormState, props.reRenderRoot)) {\r\n                props.callback({\r\n                    values: { ..._formValues },\r\n                    ..._formState,\r\n                    ...formState,\r\n                    defaultValues: _defaultValues,\r\n                });\r\n            }\r\n        },\r\n    }).unsubscribe;\r\n    const subscribe = (props) => {\r\n        _state.mount = true;\r\n        _proxySubscribeFormState = {\r\n            ..._proxySubscribeFormState,\r\n            ...props.formState,\r\n        };\r\n        return _subscribe({\r\n            ...props,\r\n            formState: _proxySubscribeFormState,\r\n        });\r\n    };\r\n    const unregister = (name, options = {}) => {\r\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\r\n            _names.mount.delete(fieldName);\r\n            _names.array.delete(fieldName);\r\n            if (!options.keepValue) {\r\n                unset(_fields, fieldName);\r\n                unset(_formValues, fieldName);\r\n            }\r\n            !options.keepError && unset(_formState.errors, fieldName);\r\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\r\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\r\n            !options.keepIsValidating &&\r\n                unset(_formState.validatingFields, fieldName);\r\n            !_options.shouldUnregister &&\r\n                !options.keepDefaultValue &&\r\n                unset(_defaultValues, fieldName);\r\n        }\r\n        _subjects.state.next({\r\n            values: cloneObject(_formValues),\r\n        });\r\n        _subjects.state.next({\r\n            ..._formState,\r\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\r\n        });\r\n        !options.keepIsValid && _setValid();\r\n    };\r\n    const _setDisabledField = ({ disabled, name, }) => {\r\n        if ((isBoolean(disabled) && _state.mount) ||\r\n            !!disabled ||\r\n            _names.disabled.has(name)) {\r\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\r\n        }\r\n    };\r\n    const register = (name, options = {}) => {\r\n        let field = get(_fields, name);\r\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\r\n        set(_fields, name, {\r\n            ...(field || {}),\r\n            _f: {\r\n                ...(field && field._f ? field._f : { ref: { name } }),\r\n                name,\r\n                mount: true,\r\n                ...options,\r\n            },\r\n        });\r\n        _names.mount.add(name);\r\n        if (field) {\r\n            _setDisabledField({\r\n                disabled: isBoolean(options.disabled)\r\n                    ? options.disabled\r\n                    : _options.disabled,\r\n                name,\r\n            });\r\n        }\r\n        else {\r\n            updateValidAndValue(name, true, options.value);\r\n        }\r\n        return {\r\n            ...(disabledIsDefined\r\n                ? { disabled: options.disabled || _options.disabled }\r\n                : {}),\r\n            ...(_options.progressive\r\n                ? {\r\n                    required: !!options.required,\r\n                    min: getRuleValue(options.min),\r\n                    max: getRuleValue(options.max),\r\n                    minLength: getRuleValue(options.minLength),\r\n                    maxLength: getRuleValue(options.maxLength),\r\n                    pattern: getRuleValue(options.pattern),\r\n                }\r\n                : {}),\r\n            name,\r\n            onChange,\r\n            onBlur: onChange,\r\n            ref: (ref) => {\r\n                if (ref) {\r\n                    register(name, options);\r\n                    field = get(_fields, name);\r\n                    const fieldRef = isUndefined(ref.value)\r\n                        ? ref.querySelectorAll\r\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\r\n                            : ref\r\n                        : ref;\r\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\r\n                    const refs = field._f.refs || [];\r\n                    if (radioOrCheckbox\r\n                        ? refs.find((option) => option === fieldRef)\r\n                        : fieldRef === field._f.ref) {\r\n                        return;\r\n                    }\r\n                    set(_fields, name, {\r\n                        _f: {\r\n                            ...field._f,\r\n                            ...(radioOrCheckbox\r\n                                ? {\r\n                                    refs: [\r\n                                        ...refs.filter(live),\r\n                                        fieldRef,\r\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\r\n                                    ],\r\n                                    ref: { type: fieldRef.type, name },\r\n                                }\r\n                                : { ref: fieldRef }),\r\n                        },\r\n                    });\r\n                    updateValidAndValue(name, false, undefined, fieldRef);\r\n                }\r\n                else {\r\n                    field = get(_fields, name, {});\r\n                    if (field._f) {\r\n                        field._f.mount = false;\r\n                    }\r\n                    (_options.shouldUnregister || options.shouldUnregister) &&\r\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\r\n                        _names.unMount.add(name);\r\n                }\r\n            },\r\n        };\r\n    };\r\n    const _focusError = () => _options.shouldFocusError &&\r\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\r\n    const _disableForm = (disabled) => {\r\n        if (isBoolean(disabled)) {\r\n            _subjects.state.next({ disabled });\r\n            iterateFieldsByAction(_fields, (ref, name) => {\r\n                const currentField = get(_fields, name);\r\n                if (currentField) {\r\n                    ref.disabled = currentField._f.disabled || disabled;\r\n                    if (Array.isArray(currentField._f.refs)) {\r\n                        currentField._f.refs.forEach((inputRef) => {\r\n                            inputRef.disabled = currentField._f.disabled || disabled;\r\n                        });\r\n                    }\r\n                }\r\n            }, 0, false);\r\n        }\r\n    };\r\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\r\n        let onValidError = undefined;\r\n        if (e) {\r\n            e.preventDefault && e.preventDefault();\r\n            e.persist &&\r\n                e.persist();\r\n        }\r\n        let fieldValues = cloneObject(_formValues);\r\n        _subjects.state.next({\r\n            isSubmitting: true,\r\n        });\r\n        if (_options.resolver) {\r\n            const { errors, values } = await _runSchema();\r\n            _formState.errors = errors;\r\n            fieldValues = cloneObject(values);\r\n        }\r\n        else {\r\n            await executeBuiltInValidation(_fields);\r\n        }\r\n        if (_names.disabled.size) {\r\n            for (const name of _names.disabled) {\r\n                unset(fieldValues, name);\r\n            }\r\n        }\r\n        unset(_formState.errors, 'root');\r\n        if (isEmptyObject(_formState.errors)) {\r\n            _subjects.state.next({\r\n                errors: {},\r\n            });\r\n            try {\r\n                await onValid(fieldValues, e);\r\n            }\r\n            catch (error) {\r\n                onValidError = error;\r\n            }\r\n        }\r\n        else {\r\n            if (onInvalid) {\r\n                await onInvalid({ ..._formState.errors }, e);\r\n            }\r\n            _focusError();\r\n            setTimeout(_focusError);\r\n        }\r\n        _subjects.state.next({\r\n            isSubmitted: true,\r\n            isSubmitting: false,\r\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\r\n            submitCount: _formState.submitCount + 1,\r\n            errors: _formState.errors,\r\n        });\r\n        if (onValidError) {\r\n            throw onValidError;\r\n        }\r\n    };\r\n    const resetField = (name, options = {}) => {\r\n        if (get(_fields, name)) {\r\n            if (isUndefined(options.defaultValue)) {\r\n                setValue(name, cloneObject(get(_defaultValues, name)));\r\n            }\r\n            else {\r\n                setValue(name, options.defaultValue);\r\n                set(_defaultValues, name, cloneObject(options.defaultValue));\r\n            }\r\n            if (!options.keepTouched) {\r\n                unset(_formState.touchedFields, name);\r\n            }\r\n            if (!options.keepDirty) {\r\n                unset(_formState.dirtyFields, name);\r\n                _formState.isDirty = options.defaultValue\r\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\r\n                    : _getDirty();\r\n            }\r\n            if (!options.keepError) {\r\n                unset(_formState.errors, name);\r\n                _proxyFormState.isValid && _setValid();\r\n            }\r\n            _subjects.state.next({ ..._formState });\r\n        }\r\n    };\r\n    const _reset = (formValues, keepStateOptions = {}) => {\r\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\r\n        const cloneUpdatedValues = cloneObject(updatedValues);\r\n        const isEmptyResetValues = isEmptyObject(formValues);\r\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\r\n        if (!keepStateOptions.keepDefaultValues) {\r\n            _defaultValues = updatedValues;\r\n        }\r\n        if (!keepStateOptions.keepValues) {\r\n            if (keepStateOptions.keepDirtyValues) {\r\n                const fieldsToCheck = new Set([\r\n                    ..._names.mount,\r\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\r\n                ]);\r\n                for (const fieldName of Array.from(fieldsToCheck)) {\r\n                    get(_formState.dirtyFields, fieldName)\r\n                        ? set(values, fieldName, get(_formValues, fieldName))\r\n                        : setValue(fieldName, get(values, fieldName));\r\n                }\r\n            }\r\n            else {\r\n                if (isWeb && isUndefined(formValues)) {\r\n                    for (const name of _names.mount) {\r\n                        const field = get(_fields, name);\r\n                        if (field && field._f) {\r\n                            const fieldReference = Array.isArray(field._f.refs)\r\n                                ? field._f.refs[0]\r\n                                : field._f.ref;\r\n                            if (isHTMLElement(fieldReference)) {\r\n                                const form = fieldReference.closest('form');\r\n                                if (form) {\r\n                                    form.reset();\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (keepStateOptions.keepFieldsRef) {\r\n                    for (const fieldName of _names.mount) {\r\n                        setValue(fieldName, get(values, fieldName));\r\n                    }\r\n                }\r\n                else {\r\n                    _fields = {};\r\n                }\r\n            }\r\n            _formValues = _options.shouldUnregister\r\n                ? keepStateOptions.keepDefaultValues\r\n                    ? cloneObject(_defaultValues)\r\n                    : {}\r\n                : cloneObject(values);\r\n            _subjects.array.next({\r\n                values: { ...values },\r\n            });\r\n            _subjects.state.next({\r\n                values: { ...values },\r\n            });\r\n        }\r\n        _names = {\r\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\r\n            unMount: new Set(),\r\n            array: new Set(),\r\n            disabled: new Set(),\r\n            watch: new Set(),\r\n            watchAll: false,\r\n            focus: '',\r\n        };\r\n        _state.mount =\r\n            !_proxyFormState.isValid ||\r\n                !!keepStateOptions.keepIsValid ||\r\n                !!keepStateOptions.keepDirtyValues;\r\n        _state.watch = !!_options.shouldUnregister;\r\n        _subjects.state.next({\r\n            submitCount: keepStateOptions.keepSubmitCount\r\n                ? _formState.submitCount\r\n                : 0,\r\n            isDirty: isEmptyResetValues\r\n                ? false\r\n                : keepStateOptions.keepDirty\r\n                    ? _formState.isDirty\r\n                    : !!(keepStateOptions.keepDefaultValues &&\r\n                        !deepEqual(formValues, _defaultValues)),\r\n            isSubmitted: keepStateOptions.keepIsSubmitted\r\n                ? _formState.isSubmitted\r\n                : false,\r\n            dirtyFields: isEmptyResetValues\r\n                ? {}\r\n                : keepStateOptions.keepDirtyValues\r\n                    ? keepStateOptions.keepDefaultValues && _formValues\r\n                        ? getDirtyFields(_defaultValues, _formValues)\r\n                        : _formState.dirtyFields\r\n                    : keepStateOptions.keepDefaultValues && formValues\r\n                        ? getDirtyFields(_defaultValues, formValues)\r\n                        : keepStateOptions.keepDirty\r\n                            ? _formState.dirtyFields\r\n                            : {},\r\n            touchedFields: keepStateOptions.keepTouched\r\n                ? _formState.touchedFields\r\n                : {},\r\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\r\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\r\n                ? _formState.isSubmitSuccessful\r\n                : false,\r\n            isSubmitting: false,\r\n            defaultValues: _defaultValues,\r\n        });\r\n    };\r\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\r\n        ? formValues(_formValues)\r\n        : formValues, keepStateOptions);\r\n    const setFocus = (name, options = {}) => {\r\n        const field = get(_fields, name);\r\n        const fieldReference = field && field._f;\r\n        if (fieldReference) {\r\n            const fieldRef = fieldReference.refs\r\n                ? fieldReference.refs[0]\r\n                : fieldReference.ref;\r\n            if (fieldRef.focus) {\r\n                fieldRef.focus();\r\n                options.shouldSelect &&\r\n                    isFunction(fieldRef.select) &&\r\n                    fieldRef.select();\r\n            }\r\n        }\r\n    };\r\n    const _setFormState = (updatedFormState) => {\r\n        _formState = {\r\n            ..._formState,\r\n            ...updatedFormState,\r\n        };\r\n    };\r\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\r\n        _options.defaultValues().then((values) => {\r\n            reset(values, _options.resetOptions);\r\n            _subjects.state.next({\r\n                isLoading: false,\r\n            });\r\n        });\r\n    const methods = {\r\n        control: {\r\n            register,\r\n            unregister,\r\n            getFieldState,\r\n            handleSubmit,\r\n            setError,\r\n            _subscribe,\r\n            _runSchema,\r\n            _focusError,\r\n            _getWatch,\r\n            _getDirty,\r\n            _setValid,\r\n            _setFieldArray,\r\n            _setDisabledField,\r\n            _setErrors,\r\n            _getFieldArray,\r\n            _reset,\r\n            _resetDefaultValues,\r\n            _removeUnmounted,\r\n            _disableForm,\r\n            _subjects,\r\n            _proxyFormState,\r\n            get _fields() {\r\n                return _fields;\r\n            },\r\n            get _formValues() {\r\n                return _formValues;\r\n            },\r\n            get _state() {\r\n                return _state;\r\n            },\r\n            set _state(value) {\r\n                _state = value;\r\n            },\r\n            get _defaultValues() {\r\n                return _defaultValues;\r\n            },\r\n            get _names() {\r\n                return _names;\r\n            },\r\n            set _names(value) {\r\n                _names = value;\r\n            },\r\n            get _formState() {\r\n                return _formState;\r\n            },\r\n            get _options() {\r\n                return _options;\r\n            },\r\n            set _options(value) {\r\n                _options = {\r\n                    ..._options,\r\n                    ...value,\r\n                };\r\n            },\r\n        },\r\n        subscribe,\r\n        trigger,\r\n        register,\r\n        handleSubmit,\r\n        watch,\r\n        setValue,\r\n        getValues,\r\n        reset,\r\n        resetField,\r\n        clearErrors,\r\n        unregister,\r\n        setError,\r\n        setFocus,\r\n        getFieldState,\r\n    };\r\n    return {\r\n        ...methods,\r\n        formControl: methods,\r\n    };\r\n}\r\n\r\nvar generateId = () => {\r\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n        return crypto.randomUUID();\r\n    }\r\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\r\n\r\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\r\n    ? options.focusName ||\r\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\r\n    : '';\r\n\r\nvar appendAt = (data, value) => [\r\n    ...data,\r\n    ...convertToArrayPayload(value),\r\n];\r\n\r\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\r\n\r\nfunction insert(data, index, value) {\r\n    return [\r\n        ...data.slice(0, index),\r\n        ...convertToArrayPayload(value),\r\n        ...data.slice(index),\r\n    ];\r\n}\r\n\r\nvar moveArrayAt = (data, from, to) => {\r\n    if (!Array.isArray(data)) {\r\n        return [];\r\n    }\r\n    if (isUndefined(data[to])) {\r\n        data[to] = undefined;\r\n    }\r\n    data.splice(to, 0, data.splice(from, 1)[0]);\r\n    return data;\r\n};\r\n\r\nvar prependAt = (data, value) => [\r\n    ...convertToArrayPayload(value),\r\n    ...convertToArrayPayload(data),\r\n];\r\n\r\nfunction removeAtIndexes(data, indexes) {\r\n    let i = 0;\r\n    const temp = [...data];\r\n    for (const index of indexes) {\r\n        temp.splice(index - i, 1);\r\n        i++;\r\n    }\r\n    return compact(temp).length ? temp : [];\r\n}\r\nvar removeArrayAt = (data, index) => isUndefined(index)\r\n    ? []\r\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\r\n\r\nvar swapArrayAt = (data, indexA, indexB) => {\r\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\r\n};\r\n\r\nvar updateAt = (fieldValues, index, value) => {\r\n    fieldValues[index] = value;\r\n    return fieldValues;\r\n};\r\n\r\n/**\r\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\r\n *\r\n * @param props - useFieldArray props\r\n *\r\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\r\n *     defaultValues: {\r\n *       test: []\r\n *     }\r\n *   });\r\n *   const { fields, append } = useFieldArray({\r\n *     control,\r\n *     name: \"test\"\r\n *   });\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\r\n *       {fields.map((item, index) => (\r\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\r\n *       ))}\r\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\r\n *         append\r\n *       </button>\r\n *       <input type=\"submit\" />\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useFieldArray(props) {\r\n    const methods = useFormContext();\r\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\r\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\r\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\r\n    const _actioned = React.useRef(false);\r\n    control._names.array.add(name);\r\n    React.useMemo(() => rules &&\r\n        fields.length >= 0 &&\r\n        control.register(name, rules), [control, name, fields.length, rules]);\r\n    useIsomorphicLayoutEffect(() => control._subjects.array.subscribe({\r\n        next: ({ values, name: fieldArrayName, }) => {\r\n            if (fieldArrayName === name || !fieldArrayName) {\r\n                const fieldValues = get(values, name);\r\n                if (Array.isArray(fieldValues)) {\r\n                    setFields(fieldValues);\r\n                    ids.current = fieldValues.map(generateId);\r\n                }\r\n            }\r\n        },\r\n    }).unsubscribe, [control, name]);\r\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\r\n        _actioned.current = true;\r\n        control._setFieldArray(name, updatedFieldArrayValues);\r\n    }, [control, name]);\r\n    const append = (value, options) => {\r\n        const appendValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\r\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\r\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._setFieldArray(name, updatedFieldArrayValues, appendAt, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const prepend = (value, options) => {\r\n        const prependValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\r\n        control._names.focus = getFocusFieldName(name, 0, options);\r\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._setFieldArray(name, updatedFieldArrayValues, prependAt, {\r\n            argA: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const remove = (index) => {\r\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\r\n        ids.current = removeArrayAt(ids.current, index);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        !Array.isArray(get(control._fields, name)) &&\r\n            set(control._fields, name, undefined);\r\n        control._setFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\r\n            argA: index,\r\n        });\r\n    };\r\n    const insert$1 = (index, value, options) => {\r\n        const insertValue = convertToArrayPayload(cloneObject(value));\r\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\r\n        control._names.focus = getFocusFieldName(name, index, options);\r\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._setFieldArray(name, updatedFieldArrayValues, insert, {\r\n            argA: index,\r\n            argB: fillEmptyArray(value),\r\n        });\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\r\n        swapArrayAt(ids.current, indexA, indexB);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._setFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\r\n            argA: indexA,\r\n            argB: indexB,\r\n        }, false);\r\n    };\r\n    const move = (from, to) => {\r\n        const updatedFieldArrayValues = control._getFieldArray(name);\r\n        moveArrayAt(updatedFieldArrayValues, from, to);\r\n        moveArrayAt(ids.current, from, to);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields(updatedFieldArrayValues);\r\n        control._setFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\r\n            argA: from,\r\n            argB: to,\r\n        }, false);\r\n    };\r\n    const update = (index, value) => {\r\n        const updateValue = cloneObject(value);\r\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\r\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\r\n        updateValues(updatedFieldArrayValues);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._setFieldArray(name, updatedFieldArrayValues, updateAt, {\r\n            argA: index,\r\n            argB: updateValue,\r\n        }, true, false);\r\n    };\r\n    const replace = (value) => {\r\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\r\n        ids.current = updatedFieldArrayValues.map(generateId);\r\n        updateValues([...updatedFieldArrayValues]);\r\n        setFields([...updatedFieldArrayValues]);\r\n        control._setFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\r\n    };\r\n    React.useEffect(() => {\r\n        control._state.action = false;\r\n        isWatched(name, control._names) &&\r\n            control._subjects.state.next({\r\n                ...control._formState,\r\n            });\r\n        if (_actioned.current &&\r\n            (!getValidationModes(control._options.mode).isOnSubmit ||\r\n                control._formState.isSubmitted) &&\r\n            !getValidationModes(control._options.reValidateMode).isOnSubmit) {\r\n            if (control._options.resolver) {\r\n                control._runSchema([name]).then((result) => {\r\n                    const error = get(result.errors, name);\r\n                    const existingError = get(control._formState.errors, name);\r\n                    if (existingError\r\n                        ? (!error && existingError.type) ||\r\n                            (error &&\r\n                                (existingError.type !== error.type ||\r\n                                    existingError.message !== error.message))\r\n                        : error && error.type) {\r\n                        error\r\n                            ? set(control._formState.errors, name, error)\r\n                            : unset(control._formState.errors, name);\r\n                        control._subjects.state.next({\r\n                            errors: control._formState.errors,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                const field = get(control._fields, name);\r\n                if (field &&\r\n                    field._f &&\r\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\r\n                        getValidationModes(control._options.mode).isOnSubmit)) {\r\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\r\n                        control._subjects.state.next({\r\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\r\n                        }));\r\n                }\r\n            }\r\n        }\r\n        control._subjects.state.next({\r\n            name,\r\n            values: cloneObject(control._formValues),\r\n        });\r\n        control._names.focus &&\r\n            iterateFieldsByAction(control._fields, (ref, key) => {\r\n                if (control._names.focus &&\r\n                    key.startsWith(control._names.focus) &&\r\n                    ref.focus) {\r\n                    ref.focus();\r\n                    return 1;\r\n                }\r\n                return;\r\n            });\r\n        control._names.focus = '';\r\n        control._setValid();\r\n        _actioned.current = false;\r\n    }, [fields, name, control]);\r\n    React.useEffect(() => {\r\n        !get(control._formValues, name) && control._setFieldArray(name);\r\n        return () => {\r\n            const updateMounted = (name, value) => {\r\n                const field = get(control._fields, name);\r\n                if (field && field._f) {\r\n                    field._f.mount = value;\r\n                }\r\n            };\r\n            control._options.shouldUnregister || shouldUnregister\r\n                ? control.unregister(name)\r\n                : updateMounted(name, false);\r\n        };\r\n    }, [name, control, keyName, shouldUnregister]);\r\n    return {\r\n        swap: React.useCallback(swap, [updateValues, name, control]),\r\n        move: React.useCallback(move, [updateValues, name, control]),\r\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\r\n        append: React.useCallback(append, [updateValues, name, control]),\r\n        remove: React.useCallback(remove, [updateValues, name, control]),\r\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\r\n        update: React.useCallback(update, [updateValues, name, control]),\r\n        replace: React.useCallback(replace, [updateValues, name, control]),\r\n        fields: React.useMemo(() => fields.map((field, index) => ({\r\n            ...field,\r\n            [keyName]: ids.current[index] || generateId(),\r\n        })), [fields, keyName]),\r\n    };\r\n}\r\n\r\n/**\r\n * Custom hook to manage the entire form.\r\n *\r\n * @remarks\r\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\r\n *\r\n * @param props - form configuration and validation parameters.\r\n *\r\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\r\n *\r\n * @example\r\n * ```tsx\r\n * function App() {\r\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\r\n *   const onSubmit = data => console.log(data);\r\n *\r\n *   console.log(watch(\"example\"));\r\n *\r\n *   return (\r\n *     <form onSubmit={handleSubmit(onSubmit)}>\r\n *       <input defaultValue=\"test\" {...register(\"example\")} />\r\n *       <input {...register(\"exampleRequired\", { required: true })} />\r\n *       {errors.exampleRequired && <span>This field is required</span>}\r\n *       <button>Submit</button>\r\n *     </form>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nfunction useForm(props = {}) {\r\n    const _formControl = React.useRef(undefined);\r\n    const _values = React.useRef(undefined);\r\n    const [formState, updateFormState] = React.useState({\r\n        isDirty: false,\r\n        isValidating: false,\r\n        isLoading: isFunction(props.defaultValues),\r\n        isSubmitted: false,\r\n        isSubmitting: false,\r\n        isSubmitSuccessful: false,\r\n        isValid: false,\r\n        submitCount: 0,\r\n        dirtyFields: {},\r\n        touchedFields: {},\r\n        validatingFields: {},\r\n        errors: props.errors || {},\r\n        disabled: props.disabled || false,\r\n        isReady: false,\r\n        defaultValues: isFunction(props.defaultValues)\r\n            ? undefined\r\n            : props.defaultValues,\r\n    });\r\n    if (!_formControl.current) {\r\n        if (props.formControl) {\r\n            _formControl.current = {\r\n                ...props.formControl,\r\n                formState,\r\n            };\r\n            if (props.defaultValues && !isFunction(props.defaultValues)) {\r\n                props.formControl.reset(props.defaultValues, props.resetOptions);\r\n            }\r\n        }\r\n        else {\r\n            const { formControl, ...rest } = createFormControl(props);\r\n            _formControl.current = {\r\n                ...rest,\r\n                formState,\r\n            };\r\n        }\r\n    }\r\n    const control = _formControl.current.control;\r\n    control._options = props;\r\n    useIsomorphicLayoutEffect(() => {\r\n        const sub = control._subscribe({\r\n            formState: control._proxyFormState,\r\n            callback: () => updateFormState({ ...control._formState }),\r\n            reRenderRoot: true,\r\n        });\r\n        updateFormState((data) => ({\r\n            ...data,\r\n            isReady: true,\r\n        }));\r\n        control._formState.isReady = true;\r\n        return sub;\r\n    }, [control]);\r\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\r\n    React.useEffect(() => {\r\n        if (props.mode) {\r\n            control._options.mode = props.mode;\r\n        }\r\n        if (props.reValidateMode) {\r\n            control._options.reValidateMode = props.reValidateMode;\r\n        }\r\n    }, [control, props.mode, props.reValidateMode]);\r\n    React.useEffect(() => {\r\n        if (props.errors) {\r\n            control._setErrors(props.errors);\r\n            control._focusError();\r\n        }\r\n    }, [control, props.errors]);\r\n    React.useEffect(() => {\r\n        props.shouldUnregister &&\r\n            control._subjects.state.next({\r\n                values: control._getWatch(),\r\n            });\r\n    }, [control, props.shouldUnregister]);\r\n    React.useEffect(() => {\r\n        if (control._proxyFormState.isDirty) {\r\n            const isDirty = control._getDirty();\r\n            if (isDirty !== formState.isDirty) {\r\n                control._subjects.state.next({\r\n                    isDirty,\r\n                });\r\n            }\r\n        }\r\n    }, [control, formState.isDirty]);\r\n    React.useEffect(() => {\r\n        if (props.values && !deepEqual(props.values, _values.current)) {\r\n            control._reset(props.values, {\r\n                keepFieldsRef: true,\r\n                ...control._options.resetOptions,\r\n            });\r\n            _values.current = props.values;\r\n            updateFormState((state) => ({ ...state }));\r\n        }\r\n        else {\r\n            control._resetDefaultValues();\r\n        }\r\n    }, [control, props.values]);\r\n    React.useEffect(() => {\r\n        if (!control._state.mount) {\r\n            control._setValid();\r\n            control._state.mount = true;\r\n        }\r\n        if (control._state.watch) {\r\n            control._state.watch = false;\r\n            control._subjects.state.next({ ...control._formState });\r\n        }\r\n        control._removeUnmounted();\r\n    });\r\n    _formControl.current.formState = getProxyFormState(formState, control);\r\n    return _formControl.current;\r\n}\r\n\r\n/**\r\n * Watch component that subscribes to form field changes and re-renders when watched fields update.\r\n *\r\n * @param control - The form control object from useForm\r\n * @param names - Array of field names to watch for changes\r\n * @param render - The function that receives watched values and returns ReactNode\r\n * @returns The result of calling render function with watched values\r\n *\r\n * @example\r\n * The `Watch` component only re-render when the values of `foo`, `bar`, and `baz.qux` change.\r\n * The types of `foo`, `bar`, and `baz.qux` are precisely inferred.\r\n *\r\n * ```tsx\r\n * const { control } = useForm();\r\n *\r\n * <Watch\r\n *   control={control}\r\n *   names={['foo', 'bar', 'baz.qux']}\r\n *   render={([foo, bar, baz_qux]) => <div>{foo}{bar}{baz_qux}</div>}\r\n * />\r\n * ```\r\n */\r\nconst Watch = ({ control, names, render, }) => render(useWatch({ control, name: names }));\r\n\r\nexport { Controller, Form, FormProvider, Watch, appendErrors, createFormControl, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\r\n//# sourceMappingURL=index.esm.mjs.map\r\n"],"mappings":"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"}